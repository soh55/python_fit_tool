# Autogenerated. Do not modify.
#
# Profile: {{ sdk_version }}
from typing import Optional

from fit_tool.base_type import BaseType
from fit_tool.data_message import DataMessage
from fit_tool.definition_message import DefinitionMessage
from fit_tool.developer_field import DeveloperField
from fit_tool.endian import Endian
from fit_tool.field import Field
from fit_tool.sub_field import SubField
from fit_tool.profile.profile_type import *
from typing import List as list
from typing import Dict as dict


class {{class_name}}(DataMessage):
    ID = {{message.id}}
    NAME = '{{message.name}}'

    @staticmethod
    def __get_field_size(definition_message: DefinitionMessage, field_id: int) -> int:
        size = 0
        if definition_message:
            field_definition = definition_message.get_field_definition(field_id)
            if field_definition:
                size = field_definition.size

        return size

    def __init__(self, definition_message=None, developer_fields=None, local_id: int = 0,
                 endian: Endian = Endian.LITTLE):
        super().__init__(name={{class_name}}.NAME,
                         global_id={{class_name}}.ID,
                         local_id=definition_message.local_id if definition_message else local_id,
                         endian=definition_message.endian if definition_message else endian,
                         definition_message=definition_message,
                         developer_fields=developer_fields,
                         fields=[
                             {%- for field_name, field in message.fields_by_name.items() %}
        {{message.field_class_name_by_name[field_name]}}(
            size=self.__get_field_size(definition_message, {{message.field_class_name_by_name[field_name]}}.ID),
            growable=definition_message is None)
        {%- if not loop.last %}, {% endif %}
        {%- endfor %}
        ])

        self.growable = self.definition_message is None

    @classmethod
    def from_bytes(cls, definition_message: DefinitionMessage, developer_fields: list[DeveloperField],
                   bytes_buffer: bytes, offset: int = 0):
        message = cls(definition_message=definition_message, developer_fields=developer_fields)
        message.read_from_bytes(bytes_buffer, offset)
        return message


{% for field_name, field in message.fields_by_name.items() %}
{%- if field.type_.name == 'date_time' %}
# timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
{%- endif %}

    @property
    def {{message.field_property_name_by_name[field_name]}}(self) -> Optional[{{message.field_property_type_by_name[field_name]}}]:
        field = self.get_field({{message.field_class_name_by_name[field_name]}}.ID)

        {%- if field.type_ and field.type_.base_type.name == 'enum' %}
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            value = field.get_value(sub_field=sub_field)
            if value is None:
                return None

            return {{message.field_property_type_by_name[field_name]}}(value)
        else:
            return None

        {%- else %}
        if field and field.is_valid():
            {%- if field.base_type.name != 'STRING' and field.array_type %}
            return field.get_values()
            {%- else %}
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
            {%- endif %}
        else:
            return None
        {%- endif %}

{% if field.type_.name == 'date_time' %}
    # timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
{%- endif %}

    @{{message.field_property_name_by_name[field_name]}}.setter
    def {{message.field_property_name_by_name[field_name]}}(self, value: {{message.field_property_type_by_name[field_name]}}):
        field = self.get_field({{message.field_class_name_by_name[field_name]}}.ID)

        if field:
            if value is None:
                field.clear()
            else:

                {%- if field.type_ and field.type_.base_type.name == 'enum' %}
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value.value, sub_field)
                {%- elif field.base_type.name != 'STRING' and field.array_type %}
                field.set_values(value)
                {%- else %}
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)
                {%- endif %}

    {% for sub_field in field.sub_fields %}


    @property
    def {{field.subfield_property_name_by_name[sub_field.name]}}(self) -> Optional[{{field.subfield_property_type_by_name[sub_field.name]}}]:
        field = self.get_field({{message.field_class_name_by_name[field_name]}}.ID)
        type_field = self.get_field({{message.field_class_name_by_name[sub_field.ref_field.name]}}.ID)

        is_sub_field_valid = type_field and type_field.get_value() in {{sub_field.ref_field_values}}

        {%- if field.type_ and field.type_.base_type.name == 'enum' %}
        if field and field.is_valid() and is_sub_field_valid:
            sub_field = field.get_valid_sub_field(self.fields)
            value = field.get_value(sub_field=sub_field)
            if value is None:
                return None
            else:
                return {{message.field_property_type_by_name[field_name]}}(field.get_value())

        else:
            return None

    {%- else %}
        if field and field.is_valid() and is_sub_field_valid:
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None
    {%- endif %}

    @{{field.subfield_property_name_by_name[sub_field.name]}}.setter
    def {{field.subfield_property_name_by_name[sub_field.name]}}(self, value: {{field.subfield_property_type_by_name[sub_field.name]}}):
        field = self.get_field({{message.field_class_name_by_name[field_name]}}.ID)
        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                {%- if field.type_ and field.type_.base_type.name == 'enum' %}
                field.set_value(0, value.value, sub_field)
                {%- else %}
                field.set_value(0, value, sub_field)
                {%- endif %}

    {%- endfor %}
    {%- endfor %}


{% for field_name, field in message.fields_by_name.items() if field.def_num not in [253, 254] %}


class {{message.field_class_name_by_name[field_name]}}(Field):
    ID = {{field.field_id}}

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='{{field_name}}',
            field_id=self.ID,
            base_type=BaseType.{{field.base_type.name | upper}},
        offset = {{field.offset}},
                 scale = {{field.scale}},
                         size = size,
                                {%- if field.units %}
        units = '{{field.units}}',
                {%- endif %}
        {%- if field.units %}
        type_name = '{{field.type_.name}}',
                    {%- endif %}
        growable = growable,
                   sub_fields = [
            {%- for sub_field in field.sub_fields %}
        SubField(
            name='{{sub_field.name}}',
            base_type=BaseType.{{sub_field.base_type.name | upper}},
        scale = {{sub_field.scale}},
                offset = {{sub_field.offset}},
                         {%- if sub_field.units %}
        units = '{{sub_field.units }}',
                {%- endif %}
        reference_map = {
            {%- for reference_name in sub_field.ref_field_map.keys() %}
        {{message.field_class_name_by_name[reference_name]}}.ID: {{sub_field.ref_field_map[reference_name]}}
        {%- if not loop.last %}, {% endif %}
        {%- endfor %}
        }){%- if not loop.last %}, {% endif %}
        {%- endfor %}
        ]
        )

    {%- endfor %}
